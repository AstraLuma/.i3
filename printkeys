#!/usr/bin/python3
"""
Prints out the keymap for i3, dunst.
"""

import re
import configparser
import subprocess


class PlaintextPrinter:
    class section:
        def __init__(self, name):
            self.name = name

        def __enter__(self):
            print(self.name+':')
            return self

        def __exit__(self, *_):
            pass

    def key(self, key, action):
        print("\t{}:\t{}".format(key, action))


# i3 Keys
class i3keys:
    # TODO: Find a real i3 configuration parser
    # I solved my problem with 4 regex's. Do I have 5 problems now? Or 8?
    SETVAR = re.compile(r'set\s+(\S+)\s+(.+)')
    BINDKEY = re.compile(r'bindsym\s+(\S+)\s+(.+)')
    STARTMODE = re.compile(r'mode\s+(\S+)\s+{')
    ENDMODE = re.compile(r'}')

    def __init__(self):
        self.vars = {}

    def subvars(self, line):
        def lookup(match):
            return self.vars.get(match.group(1), match.group(0))
        return re.sub(r'\$(\w+)', lookup, line)

    def parseconfig(self):
        yield 'mode', (None,)
        for l in open('config'):
            l = l.strip()
            m = self.BINDKEY.match(l)
            if m:
                key, action = m.groups()
                key = self.subvars(key)
                yield 'bindsym', (key, action)
                continue
            m = self.SETVAR.match(l)
            if m:
                name, value = m.groups()
                self.vars[name[1:]] = value
                continue
            m = self.STARTMODE.match(l)
            if m:
                name, = m.groups()
                name = name.strip('"')
                yield 'mode', (name,)
                continue
            m = self.ENDMODE.match(l)
            if m:
                yield 'mode', (None,)
                continue

    def __iter__(self):
        mode = None
        for typ, vals in self.parseconfig():
            if typ == 'mode':
                mode, = vals
            if typ == 'bindsym':
                key, action = vals
                yield ('i3' if mode is None else 'i3::{}'.format(mode)), key, action


# dunst keys
def dunstkeys():
    dunst = configparser.ConfigParser()
    dunst.read('dunstrc')

    for action in ('close', 'close_all', 'history', 'context'):
        key = dunst['shortcuts'][action]
        yield "dunst", key, action


# ibus keys
class ibuskeys():
    SCHEMALINE = re.compile(r'^SCHEMA:\s+(.*)$')
    CONFIGLINE = re.compile(r'^\s+([^:]*):\s+(.*)$')

    def getconfig(self):
        try:
            output = subprocess.check_output(['ibus', 'read-config']).decode('utf-8')
        except subprocess.CalledProcessError:
            return
        else:
            schema = None
            for line in output.split('\n'):
                line = line.rstrip()
                sl = self.SCHEMALINE.match(line)
                if sl:
                    schema, = sl.groups()
                    continue
                cl = self.CONFIGLINE.match(line)
                if cl:
                    opt, value = cl.groups()
                    yield schema, opt, value
                    continue

    def __iter__(self):
        for schema, opt, value in self.getconfig():
            if (schema, opt) == ('org.freedesktop.ibus.general.hotkey', 'triggers'):
                value = value.strip("[]'")  # TODO: Real parse
                value = value.replace('<Super>', 'Mod4+')  # TODO: Figure out a more complete way to do this
                yield 'ibus', value, 'switch'


output = PlaintextPrinter()
providers = i3keys, dunstkeys, ibuskeys
if __name__ == '__main__':
    keys = {}
    # 1. Collect keys
    for p in providers:
        for section, key, action in p():
            keys.setdefault(section, {})
            keys[section][key] = action

    # 2. Output keys
    for section, ka in sorted(keys.items(), key=lambda sk: sk[0]):
        with output.section(section):
            for key, action in sorted(ka.items(), key=lambda i: i[0]):
                output.key(key, action)
